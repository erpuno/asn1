// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

@usableFromInline struct IetfAttrSyntax: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var policyAuthority: [GeneralName]?
    @usableFromInline var values: [IetfAttrSyntax_values_Choice]
    @inlinable init(policyAuthority: [GeneralName]?, values: [IetfAttrSyntax_values_Choice]) {
        self.policyAuthority = policyAuthority
        self.values = values
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let policyAuthority: [GeneralName] = try DER.sequence(of: GeneralName.self, identifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific), nodes: &nodes)
            let values: [IetfAttrSyntax_values_Choice] = try DER.sequence(of: IetfAttrSyntax_values_Choice.self, identifier: .sequence, nodes: &nodes)
            return IetfAttrSyntax(policyAuthority: policyAuthority, values: values)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            if let policyAuthority = self.policyAuthority { try coder.serializeSequenceOf(policyAuthority, identifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific)) }
            try coder.serializeSequenceOf(values)
        }
    }
}
