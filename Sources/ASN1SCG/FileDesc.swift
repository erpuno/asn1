// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import ASN1SCG
import SwiftASN1
import Crypto
import Foundation

@usableFromInline struct FileDesc: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var id: ASN1OctetString
    @usableFromInline var mime: ASN1OctetString
    @usableFromInline var payload: ASN1Any
    @usableFromInline var parentid: ASN1OctetString
    @usableFromInline var data: [Feature]
    @inlinable init(id: ASN1OctetString, mime: ASN1OctetString, payload: ASN1Any, parentid: ASN1OctetString, data: [Feature]) {
        self.id = id
        self.mime = mime
        self.payload = payload
        self.parentid = parentid
        self.data = data
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let id = try ASN1OctetString(derEncoded: &nodes)
            let mime = try ASN1OctetString(derEncoded: &nodes)
            let payload = try ASN1Any(derEncoded: &nodes)
            let parentid = try ASN1OctetString(derEncoded: &nodes)
            let data = try DER.sequence(of: Feature.self, identifier: .sequence, nodes: &nodes)
            return FileDesc(id: id, mime: mime, payload: payload, parentid: parentid, data: data)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(self.id)
            try coder.serialize(self.mime)
            try coder.serialize(self.payload)
            try coder.serialize(self.parentid)
            try coder.serializeSequenceOf(data)
        }
    }
}
