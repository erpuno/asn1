// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

@usableFromInline struct V2: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var a: [ArraySlice<UInt8>]
    @usableFromInline var b: [ArraySlice<UInt8>]
    @usableFromInline var c: ArraySlice<UInt8>
    @usableFromInline var d: ArraySlice<UInt8>
    @usableFromInline var e: Bool
    @usableFromInline var f: Bool
    @usableFromInline var g: [ArraySlice<UInt8>]?
    @usableFromInline var h: ArraySlice<UInt8>
    @usableFromInline var i: ArraySlice<UInt8>
    @usableFromInline var j: ASN1OctetString?
    @usableFromInline var k: Bool?
    @inlinable init(a: [ArraySlice<UInt8>], b: [ArraySlice<UInt8>], c: ArraySlice<UInt8>, d: ArraySlice<UInt8>, e: Bool, f: Bool, g: [ArraySlice<UInt8>]?, h: ArraySlice<UInt8>, i: ArraySlice<UInt8>, j: ASN1OctetString?, k: Bool?) {
        self.a = a
        self.b = b
        self.c = c
        self.d = d
        self.e = e
        self.f = f
        self.g = g
        self.h = h
        self.i = i
        self.j = j
        self.k = k
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let a: [ArraySlice<UInt8>] = try DER.set(of: ArraySlice<UInt8>.self, identifier: .set, nodes: &nodes)
            let b: [ArraySlice<UInt8>] = try DER.set(of: ArraySlice<UInt8>.self, identifier: .set, nodes: &nodes)
            let c: ArraySlice<UInt8> = try ArraySlice<UInt8>(derEncoded: &nodes)
            let d: ArraySlice<UInt8> = try ArraySlice<UInt8>(derEncoded: &nodes)
            let e: Bool = try Bool(derEncoded: &nodes)
            let f: Bool = try Bool(derEncoded: &nodes)
            let g: [ArraySlice<UInt8>]? = try DER.set(of: ArraySlice<UInt8>.self, identifier: .set, nodes: &nodes)
            let h: ArraySlice<UInt8> = try ArraySlice<UInt8>(derEncoded: &nodes)
            let i: ArraySlice<UInt8> = try ArraySlice<UInt8>(derEncoded: &nodes)
            let j: ASN1OctetString? = try ASN1OctetString(derEncoded: &nodes)
            let k: Bool? = try Bool(derEncoded: &nodes)
            return V2(a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h, i: i, j: j, k: k)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serializeSetOf(a)
            try coder.serializeSetOf(b)
            try coder.serialize(c)
            try coder.serialize(d)
            try coder.serialize(e)
            try coder.serialize(f)
            if let g = self.g { try coder.serializeSetOf(g) }
            try coder.serialize(h)
            try coder.serialize(i)
            if let j = self.j { try coder.serialize(j) }
            if let k = self.k { try coder.serialize(k) }
        }
    }
}
