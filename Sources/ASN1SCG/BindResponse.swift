// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Foundation

@usableFromInline struct BindResponse: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var resultCode: LDAPResult_resultCode_Enum
    @usableFromInline var matchedDN: ASN1OctetString
    @usableFromInline var diagnosticMessage: ASN1OctetString
    @usableFromInline var referral: [ASN1OctetString]?
    @usableFromInline var serverSaslCreds: ASN1OctetString?
    @inlinable init(resultCode: LDAPResult_resultCode_Enum, matchedDN: ASN1OctetString, diagnosticMessage: ASN1OctetString, referral: [ASN1OctetString]?, serverSaslCreds: ASN1OctetString?) {
        self.resultCode = resultCode
        self.matchedDN = matchedDN
        self.diagnosticMessage = diagnosticMessage
        self.referral = referral
        self.serverSaslCreds = serverSaslCreds
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let resultCode: LDAPResult_resultCode_Enum = try LDAPResult_resultCode_Enum(derEncoded: &nodes)
            let matchedDN: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let diagnosticMessage: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let referral: [ASN1OctetString] = try DER.sequence(of: ASN1OctetString.self, identifier: ASN1Identifier(tagWithNumber: 3, tagClass: .contextSpecific), nodes: &nodes)
            let serverSaslCreds: ASN1OctetString? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 7, tagClass: .contextSpecific))
            return BindResponse(resultCode: resultCode, matchedDN: matchedDN, diagnosticMessage: diagnosticMessage, referral: referral, serverSaslCreds: serverSaslCreds)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(resultCode)
            try coder.serialize(matchedDN)
            try coder.serialize(diagnosticMessage)
            if let referral = self.referral { try coder.serializeSequenceOf(referral, identifier: ASN1Identifier(tagWithNumber: 3, tagClass: .contextSpecific)) }
            if let serverSaslCreds = self.serverSaslCreds { try coder.serializeOptionalImplicitlyTagged(serverSaslCreds, withIdentifier: ASN1Identifier(tagWithNumber: 7, tagClass: .contextSpecific)) }
        }
    }
}
