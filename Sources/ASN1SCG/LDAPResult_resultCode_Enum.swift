// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Foundation

public struct LDAPResult_resultCode_Enum: DERImplicitlyTaggable, Hashable, Sendable, RawRepresentable {
    public static var defaultIdentifier: ASN1Identifier { .enumerated }
    public var rawValue: Int
    public init(rawValue: Int) { self.rawValue = rawValue }
    public init(derEncoded rootNode: ASN1Node, withIdentifier identifier: ASN1Identifier) throws {
        self.rawValue = try .init(derEncoded: rootNode, withIdentifier: identifier)
    }
    public func serialize(into coder: inout DER.Serializer, withIdentifier identifier: ASN1Identifier) throws {
        try self.rawValue.serialize(into: &coder, withIdentifier: identifier)
    }
    static let success = LDAPResult_resultCode_Enum(rawValue: 0)
    static let operationsError = LDAPResult_resultCode_Enum(rawValue: 1)
    static let protocolError = LDAPResult_resultCode_Enum(rawValue: 2)
    static let timeLimitExceeded = LDAPResult_resultCode_Enum(rawValue: 3)
    static let sizeLimitExceeded = LDAPResult_resultCode_Enum(rawValue: 4)
    static let compareFalse = LDAPResult_resultCode_Enum(rawValue: 5)
    static let compareTrue = LDAPResult_resultCode_Enum(rawValue: 6)
    static let authMethodNotSupported = LDAPResult_resultCode_Enum(rawValue: 7)
    static let strongerAuthRequired = LDAPResult_resultCode_Enum(rawValue: 8)
    static let referral = LDAPResult_resultCode_Enum(rawValue: 10)
    static let adminLimitExceeded = LDAPResult_resultCode_Enum(rawValue: 11)
    static let unavailableCriticalExtension = LDAPResult_resultCode_Enum(rawValue: 12)
    static let confidentialityRequired = LDAPResult_resultCode_Enum(rawValue: 13)
    static let saslBindInProgress = LDAPResult_resultCode_Enum(rawValue: 14)
    static let noSuchAttribute = LDAPResult_resultCode_Enum(rawValue: 16)
    static let undefinedAttributeType = LDAPResult_resultCode_Enum(rawValue: 17)
    static let inappropriateMatching = LDAPResult_resultCode_Enum(rawValue: 18)
    static let constraintViolation = LDAPResult_resultCode_Enum(rawValue: 19)
    static let attributeOrValueExists = LDAPResult_resultCode_Enum(rawValue: 20)
    static let invalidAttributeSyntax = LDAPResult_resultCode_Enum(rawValue: 21)
    static let noSuchObject = LDAPResult_resultCode_Enum(rawValue: 32)
    static let aliasProblem = LDAPResult_resultCode_Enum(rawValue: 33)
    static let invalidDNSyntax = LDAPResult_resultCode_Enum(rawValue: 34)
    static let aliasDereferencingProblem = LDAPResult_resultCode_Enum(rawValue: 36)
    static let inappropriateAuthentication = LDAPResult_resultCode_Enum(rawValue: 48)
    static let invalidCredentials = LDAPResult_resultCode_Enum(rawValue: 49)
    static let insufficientAccessRights = LDAPResult_resultCode_Enum(rawValue: 50)
    static let busy = LDAPResult_resultCode_Enum(rawValue: 51)
    static let unavailable = LDAPResult_resultCode_Enum(rawValue: 52)
    static let unwillingToPerform = LDAPResult_resultCode_Enum(rawValue: 53)
    static let loopDetect = LDAPResult_resultCode_Enum(rawValue: 54)
    static let namingViolation = LDAPResult_resultCode_Enum(rawValue: 64)
    static let objectClassViolation = LDAPResult_resultCode_Enum(rawValue: 65)
    static let notAllowedOnNonLeaf = LDAPResult_resultCode_Enum(rawValue: 66)
    static let notAllowedOnRDN = LDAPResult_resultCode_Enum(rawValue: 67)
    static let entryAlreadyExists = LDAPResult_resultCode_Enum(rawValue: 68)
    static let objectClassModsProhibited = LDAPResult_resultCode_Enum(rawValue: 69)
    static let affectsMultipleDSAs = LDAPResult_resultCode_Enum(rawValue: 71)
    static let other = LDAPResult_resultCode_Enum(rawValue: 80)
}
