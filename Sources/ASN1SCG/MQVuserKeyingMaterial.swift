// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

@usableFromInline struct MQVuserKeyingMaterial: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var ephemeralPublicKey: OriginatorPublicKey
    @usableFromInline var addedukm: ASN1OctetString?
    @inlinable init(ephemeralPublicKey: OriginatorPublicKey, addedukm: ASN1OctetString?) {
        self.ephemeralPublicKey = ephemeralPublicKey
        self.addedukm = addedukm
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let ephemeralPublicKey: OriginatorPublicKey = try OriginatorPublicKey(derEncoded: &nodes)
            let addedukm: ASN1OctetString? = try DER.optionalExplicitlyTagged(&nodes, tagNumber: 0, tagClass: .contextSpecific) { node in return try ASN1OctetString(derEncoded: node) }
            return MQVuserKeyingMaterial(ephemeralPublicKey: ephemeralPublicKey, addedukm: addedukm)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(ephemeralPublicKey)
            if let addedukm = self.addedukm { try coder.serialize(explicitlyTaggedWithTagNumber: 0, tagClass: .contextSpecific) { codec in try codec.serialize(addedukm) } }
        }
    }
}
