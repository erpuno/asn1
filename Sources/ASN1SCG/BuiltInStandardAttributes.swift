// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

@usableFromInline struct BuiltInStandardAttributes: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var country_name: CountryName?
    @usableFromInline var administration_domain_name: AdministrationDomainName?
    @usableFromInline var network_address: ASN1PrintableString?
    @usableFromInline var terminal_identifier: ASN1PrintableString?
    @usableFromInline var private_domain_name: PrivateDomainName?
    @usableFromInline var organization_name: ASN1PrintableString?
    @usableFromInline var numeric_user_identifier: ASN1PrintableString?
    @usableFromInline var personal_name: PersonalName?
    @usableFromInline var organizational_unit_names: [ASN1PrintableString]?
    @inlinable init(country_name: CountryName?, administration_domain_name: AdministrationDomainName?, network_address: ASN1PrintableString?, terminal_identifier: ASN1PrintableString?, private_domain_name: PrivateDomainName?, organization_name: ASN1PrintableString?, numeric_user_identifier: ASN1PrintableString?, personal_name: PersonalName?, organizational_unit_names: [ASN1PrintableString]?) {
        self.country_name = country_name
        self.administration_domain_name = administration_domain_name
        self.network_address = network_address
        self.terminal_identifier = terminal_identifier
        self.private_domain_name = private_domain_name
        self.organization_name = organization_name
        self.numeric_user_identifier = numeric_user_identifier
        self.personal_name = personal_name
        self.organizational_unit_names = organizational_unit_names
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let country_name: CountryName? = try CountryName(derEncoded: &nodes)
            let administration_domain_name: AdministrationDomainName? = try AdministrationDomainName(derEncoded: &nodes)
            let network_address: ASN1PrintableString? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific))
            let terminal_identifier: ASN1PrintableString? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific))
            let private_domain_name: PrivateDomainName? = try DER.optionalExplicitlyTagged(&nodes, tagNumber: 2, tagClass: .contextSpecific) { node in return try PrivateDomainName(derEncoded: node) }
            let organization_name: ASN1PrintableString? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 3, tagClass: .contextSpecific))
            let numeric_user_identifier: ASN1PrintableString? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 4, tagClass: .contextSpecific))
            let personal_name: PersonalName? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 5, tagClass: .contextSpecific))
            let organizational_unit_names: [ASN1PrintableString] = try DER.sequence(of: ASN1PrintableString.self, identifier: ASN1Identifier(tagWithNumber: 6, tagClass: .contextSpecific), nodes: &nodes)
            return BuiltInStandardAttributes(country_name: country_name, administration_domain_name: administration_domain_name, network_address: network_address, terminal_identifier: terminal_identifier, private_domain_name: private_domain_name, organization_name: organization_name, numeric_user_identifier: numeric_user_identifier, personal_name: personal_name, organizational_unit_names: organizational_unit_names)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            if let country_name = self.country_name { try coder.serialize(country_name) }
            if let administration_domain_name = self.administration_domain_name { try coder.serialize(administration_domain_name) }
            if let network_address = self.network_address { try coder.serializeOptionalImplicitlyTagged(network_address, withIdentifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific)) }
            if let terminal_identifier = self.terminal_identifier { try coder.serializeOptionalImplicitlyTagged(terminal_identifier, withIdentifier: ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific)) }
            if let private_domain_name = self.private_domain_name { try coder.serialize(explicitlyTaggedWithTagNumber: 2, tagClass: .contextSpecific) { codec in try codec.serialize(private_domain_name) } }
            if let organization_name = self.organization_name { try coder.serializeOptionalImplicitlyTagged(organization_name, withIdentifier: ASN1Identifier(tagWithNumber: 3, tagClass: .contextSpecific)) }
            if let numeric_user_identifier = self.numeric_user_identifier { try coder.serializeOptionalImplicitlyTagged(numeric_user_identifier, withIdentifier: ASN1Identifier(tagWithNumber: 4, tagClass: .contextSpecific)) }
            if let personal_name = self.personal_name { try coder.serializeOptionalImplicitlyTagged(personal_name, withIdentifier: ASN1Identifier(tagWithNumber: 5, tagClass: .contextSpecific)) }
            if let organizational_unit_names = self.organizational_unit_names { try coder.serializeSequenceOf(organizational_unit_names, identifier: ASN1Identifier(tagWithNumber: 6, tagClass: .contextSpecific)) }
        }
    }
}
