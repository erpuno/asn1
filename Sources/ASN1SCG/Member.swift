// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Foundation

@usableFromInline struct Member: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var id: ArraySlice<UInt8>
    @usableFromInline var feed_id: Member_feed_id_Choice
    @usableFromInline var feeds: [ASN1OctetString]
    @usableFromInline var phone_id: ASN1OctetString
    @usableFromInline var avatar: ASN1OctetString
    @usableFromInline var names: [ASN1OctetString]
    @usableFromInline var surnames: [ASN1OctetString]
    @usableFromInline var alias: ASN1OctetString
    @usableFromInline var update: ArraySlice<UInt8>
    @usableFromInline var settings: [Feature]
    @usableFromInline var services: [Service]
    @usableFromInline var presence: PresenceType
    @usableFromInline var status: MemberStatus
    @inlinable init(id: ArraySlice<UInt8>, feed_id: Member_feed_id_Choice, feeds: [ASN1OctetString], phone_id: ASN1OctetString, avatar: ASN1OctetString, names: [ASN1OctetString], surnames: [ASN1OctetString], alias: ASN1OctetString, update: ArraySlice<UInt8>, settings: [Feature], services: [Service], presence: PresenceType, status: MemberStatus) {
        self.id = id
        self.feed_id = feed_id
        self.feeds = feeds
        self.phone_id = phone_id
        self.avatar = avatar
        self.names = names
        self.surnames = surnames
        self.alias = alias
        self.update = update
        self.settings = settings
        self.services = services
        self.presence = presence
        self.status = status
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let id: ArraySlice<UInt8> = try ArraySlice<UInt8>(derEncoded: &nodes)
            let feed_id: Member_feed_id_Choice = try Member_feed_id_Choice(derEncoded: &nodes)
            let feeds: [ASN1OctetString] = try DER.sequence(of: ASN1OctetString.self, identifier: .sequence, nodes: &nodes)
            let phone_id: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let avatar: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let names: [ASN1OctetString] = try DER.sequence(of: ASN1OctetString.self, identifier: .sequence, nodes: &nodes)
            let surnames: [ASN1OctetString] = try DER.sequence(of: ASN1OctetString.self, identifier: .sequence, nodes: &nodes)
            let alias: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let update: ArraySlice<UInt8> = try ArraySlice<UInt8>(derEncoded: &nodes)
            let settings: [Feature] = try DER.sequence(of: Feature.self, identifier: .sequence, nodes: &nodes)
            let services: [Service] = try DER.sequence(of: Service.self, identifier: .sequence, nodes: &nodes)
            let presence: PresenceType = try PresenceType(derEncoded: &nodes)
            let status: MemberStatus = try MemberStatus(derEncoded: &nodes)
            return Member(id: id, feed_id: feed_id, feeds: feeds, phone_id: phone_id, avatar: avatar, names: names, surnames: surnames, alias: alias, update: update, settings: settings, services: services, presence: presence, status: status)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(id)
            try coder.serialize(feed_id)
            try coder.serializeSequenceOf(feeds)
            try coder.serialize(phone_id)
            try coder.serialize(avatar)
            try coder.serializeSequenceOf(names)
            try coder.serializeSequenceOf(surnames)
            try coder.serialize(alias)
            try coder.serialize(update)
            try coder.serializeSequenceOf(settings)
            try coder.serializeSequenceOf(services)
            try coder.serialize(presence)
            try coder.serialize(status)
        }
    }
}
