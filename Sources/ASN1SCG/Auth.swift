// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

@usableFromInline struct Auth: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var session: ASN1OctetString
    @usableFromInline var type: AuthType
    @usableFromInline var sms_code: ASN1OctetString
    @usableFromInline var cert: ASN1OctetString
    @usableFromInline var challange: ASN1OctetString
    @usableFromInline var push: ASN1OctetString
    @usableFromInline var os: OS
    @usableFromInline var nickname: ASN1OctetString
    @usableFromInline var settings: [Feature]
    @usableFromInline var token: ASN1OctetString
    @usableFromInline var devkey: ASN1OctetString
    @usableFromInline var phone: ASN1OctetString
    @inlinable init(session: ASN1OctetString, type: AuthType, sms_code: ASN1OctetString, cert: ASN1OctetString, challange: ASN1OctetString, push: ASN1OctetString, os: OS, nickname: ASN1OctetString, settings: [Feature], token: ASN1OctetString, devkey: ASN1OctetString, phone: ASN1OctetString) {
        self.session = session
        self.type = type
        self.sms_code = sms_code
        self.cert = cert
        self.challange = challange
        self.push = push
        self.os = os
        self.nickname = nickname
        self.settings = settings
        self.token = token
        self.devkey = devkey
        self.phone = phone
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let session = try ASN1OctetString(derEncoded: &nodes)
            let type = try AuthType(derEncoded: &nodes)
            let sms_code = try ASN1OctetString(derEncoded: &nodes)
            let cert = try ASN1OctetString(derEncoded: &nodes)
            let challange = try ASN1OctetString(derEncoded: &nodes)
            let push = try ASN1OctetString(derEncoded: &nodes)
            let os = try OS(derEncoded: &nodes)
            let nickname = try ASN1OctetString(derEncoded: &nodes)
            let settings = try DER.sequence(of: Feature.self, identifier: .sequence, nodes: &nodes)
            let token = try ASN1OctetString(derEncoded: &nodes)
            let devkey = try ASN1OctetString(derEncoded: &nodes)
            let phone = try ASN1OctetString(derEncoded: &nodes)
            return Auth(session: session, type: type, sms_code: sms_code, cert: cert, challange: challange, push: push, os: os, nickname: nickname, settings: settings, token: token, devkey: devkey, phone: phone)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(self.session)
            try coder.serialize(self.type)
            try coder.serialize(self.sms_code)
            try coder.serialize(self.cert)
            try coder.serialize(self.challange)
            try coder.serialize(self.push)
            try coder.serialize(self.os)
            try coder.serialize(self.nickname)
            try coder.serializeSequenceOf(settings)
            try coder.serialize(self.token)
            try coder.serialize(self.devkey)
            try coder.serialize(self.phone)
        }
    }
}
