// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

@usableFromInline struct LDAPMessage: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var messageID: ArraySlice<UInt8>
    @usableFromInline var protocolOp: LDAPMessage_protocolOp_Choice
    @usableFromInline var controls: [Control]?
    @inlinable init(messageID: ArraySlice<UInt8>, protocolOp: LDAPMessage_protocolOp_Choice, controls: [Control]?) {
        self.messageID = messageID
        self.protocolOp = protocolOp
        self.controls = controls
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let messageID: ArraySlice<UInt8> = try ArraySlice<UInt8>(derEncoded: &nodes)
            let protocolOp: LDAPMessage_protocolOp_Choice = try LDAPMessage_protocolOp_Choice(derEncoded: &nodes)
            let controls: [Control] = try DER.sequence(of: Control.self, identifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific), nodes: &nodes)
            return LDAPMessage(messageID: messageID, protocolOp: protocolOp, controls: controls)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(messageID)
            try coder.serialize(protocolOp)
            if let controls = self.controls { try coder.serializeSequenceOf(controls, identifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific)) }
        }
    }
}
