import Crypto
import Foundation
// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1

@usableFromInline struct K: DERImplicitlyTaggable, Hashable, Sendable {
  @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
  @usableFromInline var w: [[[Bool]]]
  @inlinable init(w: [[[Bool]]]) {
    self.w = w
  }

  @inlinable init(
    derEncoded root: ASN1Node,
    withIdentifier identifier: ASN1Identifier
  ) throws {
    let res = try DER.sequence(root, identifier: .sequence) { nodes3 in

      var w3: [[[Bool]]] = []

      while let node2 = nodes3.next() {
        w3.append(
          try DER.sequence(node2, identifier: .sequence) { nodes2 in

            var w2: [[Bool]] = []

            while let node1 = nodes2.next() {
              w2.append(
                try DER.set(node1, identifier: .set) { nodes1 in

                  var w1: [Bool] = []

                  while let node0 = nodes1.next() {
                    w1.append(
                      contentsOf: try DER.sequence(
                        of: Bool.self, identifier: .sequence, rootNode: node0)

                    )
                  }

                  return w1
                }

              )
            }
            return w2

          }

        )
      }
      return w3

    }

    self.w = res
  }
  @inlinable func serialize(
    into coder: inout DER.Serializer,
    withIdentifier identifier: ASN1Identifier
  ) throws {
    try coder.appendConstructedNode(identifier: identifier) { coder_ in
      try coder_.appendConstructedNode(identifier: .sequence) {
        codec1 in
        for element in w {
          try codec1.appendConstructedNode(identifier: .set) {
            codec1_1 in
            for element_1 in element {
              try codec1_1.serializeSequenceOf(element_1)

            }
          }

        }
      }
    }
  }

}
