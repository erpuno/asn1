// This file is autogenerated by ASN1.ERP.UNO. Do not edit.

import ASN1SCG
import SwiftASN1
import Crypto
import Foundation

@usableFromInline indirect enum LDAPMessage_protocolOp_Choice: DERParseable, DERSerializable, Hashable, Sendable {
    case bindRequest(BindRequest)
    case bindResponse(BindResponse)
    case unbindRequest(ASN1Null)
    case searchRequest(SearchRequest)
    case searchResEntry(SearchResultEntry)
    case searchResDone(LDAPResult)
    case searchResRef(SearchResultReference)
    case modifyRequest(ModifyRequest)
    case modifyResponse(LDAPResult)
    case addRequest(AddRequest)
    case addResponse(LDAPResult)
    case delRequest(ASN1OctetString)
    case delResponse(LDAPResult)
    case modDNRequest(ModifyDNRequest)
    case modDNResponse(LDAPResult)
    case compareRequest(CompareRequest)
    case compareResponse(LDAPResult)
    case abandonRequest(ArraySlice<UInt8>)
    case extendedReq(ExtendedRequest)
    case extendedResp(ExtendedResponse)
    case intermediateResponse(IntermediateResponse)
    @inlinable init(derEncoded rootNode: ASN1Node) throws {
        switch rootNode.identifier {
            case BindRequest.defaultIdentifier:
                self = .bindRequest(try BindRequest(derEncoded: rootNode))
            case BindResponse.defaultIdentifier:
                self = .bindResponse(try BindResponse(derEncoded: rootNode))
            case UnbindRequest.defaultIdentifier:
                self = .unbindRequest(try UnbindRequest(derEncoded: rootNode))
            case SearchRequest.defaultIdentifier:
                self = .searchRequest(try SearchRequest(derEncoded: rootNode))
            case SearchResultEntry.defaultIdentifier:
                self = .searchResEntry(try SearchResultEntry(derEncoded: rootNode))
            case SearchResultDone.defaultIdentifier:
                self = .searchResDone(try SearchResultDone(derEncoded: rootNode))
            case SearchResultReference.defaultIdentifier:
                self = .searchResRef(try SearchResultReference(derEncoded: rootNode))
            case ModifyRequest.defaultIdentifier:
                self = .modifyRequest(try ModifyRequest(derEncoded: rootNode))
            case ModifyResponse.defaultIdentifier:
                self = .modifyResponse(try ModifyResponse(derEncoded: rootNode))
            case AddRequest.defaultIdentifier:
                self = .addRequest(try AddRequest(derEncoded: rootNode))
            case AddResponse.defaultIdentifier:
                self = .addResponse(try AddResponse(derEncoded: rootNode))
            case DelRequest.defaultIdentifier:
                self = .delRequest(try DelRequest(derEncoded: rootNode))
            case DelResponse.defaultIdentifier:
                self = .delResponse(try DelResponse(derEncoded: rootNode))
            case ModifyDNRequest.defaultIdentifier:
                self = .modDNRequest(try ModifyDNRequest(derEncoded: rootNode))
            case ModifyDNResponse.defaultIdentifier:
                self = .modDNResponse(try ModifyDNResponse(derEncoded: rootNode))
            case CompareRequest.defaultIdentifier:
                self = .compareRequest(try CompareRequest(derEncoded: rootNode))
            case CompareResponse.defaultIdentifier:
                self = .compareResponse(try CompareResponse(derEncoded: rootNode))
            case AbandonRequest.defaultIdentifier:
                self = .abandonRequest(try AbandonRequest(derEncoded: rootNode))
            case ExtendedRequest.defaultIdentifier:
                self = .extendedReq(try ExtendedRequest(derEncoded: rootNode))
            case ExtendedResponse.defaultIdentifier:
                self = .extendedResp(try ExtendedResponse(derEncoded: rootNode))

            case IntermediateResponse.defaultIdentifier:
                self = .intermediateResponse(try IntermediateResponse(derEncoded: rootNode))
            default: throw ASN1Error.unexpectedFieldType(rootNode.identifier)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer) throws {
        switch self {
            case .bindRequest(let bindRequest): try coder.serialize(bindRequest)
            case .bindResponse(let bindResponse): try coder.serialize(bindResponse)
            case .unbindRequest(let unbindRequest): try coder.serialize(unbindRequest)
            case .searchRequest(let searchRequest): try coder.serialize(searchRequest)
            case .searchResEntry(let searchResEntry): try coder.serialize(searchResEntry)
            case .searchResDone(let searchResDone): try coder.serialize(searchResDone)
            case .searchResRef(let searchResRef): try coder.serialize(searchResRef)
            case .modifyRequest(let modifyRequest): try coder.serialize(modifyRequest)
            case .modifyResponse(let modifyResponse): try coder.serialize(modifyResponse)
            case .addRequest(let addRequest): try coder.serialize(addRequest)
            case .addResponse(let addResponse): try coder.serialize(addResponse)
            case .delRequest(let delRequest): try coder.serialize(delRequest)
            case .delResponse(let delResponse): try coder.serialize(delResponse)
            case .modDNRequest(let modDNRequest): try coder.serialize(modDNRequest)
            case .modDNResponse(let modDNResponse): try coder.serialize(modDNResponse)
            case .compareRequest(let compareRequest): try coder.serialize(compareRequest)
            case .compareResponse(let compareResponse): try coder.serialize(compareResponse)
            case .abandonRequest(let abandonRequest): try coder.serialize(abandonRequest)
            case .extendedReq(let extendedReq): try coder.serialize(extendedReq)
            case .extendedResp(let extendedResp): try coder.serialize(extendedResp)

            case .intermediateResponse(let intermediateResponse): try coder.serialize(intermediateResponse)
        }
    }

}
