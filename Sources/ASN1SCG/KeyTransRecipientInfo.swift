// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

@usableFromInline struct KeyTransRecipientInfo: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var version: Int
    @usableFromInline var rid: RecipientIdentifier
    @usableFromInline var keyEncryptionAlgorithm: AlgorithmIdentifier
    @usableFromInline var encryptedKey: ASN1OctetString
    @inlinable init(version: Int, rid: RecipientIdentifier, keyEncryptionAlgorithm: AlgorithmIdentifier, encryptedKey: ASN1OctetString) {
        self.version = version
        self.rid = rid
        self.keyEncryptionAlgorithm = keyEncryptionAlgorithm
        self.encryptedKey = encryptedKey
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let version: Int = try Int(derEncoded: &nodes)
            let rid: RecipientIdentifier = try RecipientIdentifier(derEncoded: &nodes)
            let keyEncryptionAlgorithm: AlgorithmIdentifier = try AlgorithmIdentifier(derEncoded: &nodes)
            let encryptedKey: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            return KeyTransRecipientInfo(version: version, rid: rid, keyEncryptionAlgorithm: keyEncryptionAlgorithm, encryptedKey: encryptedKey)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(version)
            try coder.serialize(rid)
            try coder.serialize(keyEncryptionAlgorithm)
            try coder.serialize(encryptedKey)
        }
    }
}
