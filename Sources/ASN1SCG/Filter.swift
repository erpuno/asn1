// Generated by ASN1SCG Compiler, Copyright Â© 2023 Namdak Tonpa.
import ASN1SCG
import SwiftASN1
import Crypto
import Foundation

@usableFromInline indirect enum Filter: DERParseable, DERSerializable, Hashable, Sendable {
    case and([Filter])
    case or([Filter])
    case not(Filter)
    case equalityMatch(AttributeValueAssertion)
    case substrings(SubstringFilter)
    case greaterOrEqual(AttributeValueAssertion)
    case lessOrEqual(AttributeValueAssertion)
    case present(ASN1OctetString)
    case approxMatch(AttributeValueAssertion)
    case extensibleMatch(MatchingRuleAssertion)
    @inlinable init(derEncoded rootNode: ASN1Node) throws {
        switch rootNode.identifier {
            case ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific):
                self = .and(try [Filter](derEncoded: rootNode))
            case ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific):
                self = .or(try [Filter](derEncoded: rootNode))
            case ASN1Identifier(tagWithNumber: 2, tagClass: .contextSpecific):
                self = .not(try Filter(derEncoded: rootNode))
            case ASN1Identifier(tagWithNumber: 3, tagClass: .contextSpecific):
                self = .equalityMatch(try AttributeValueAssertion(derEncoded: rootNode))
            case ASN1Identifier(tagWithNumber: 4, tagClass: .contextSpecific):
                self = .substrings(try SubstringFilter(derEncoded: rootNode))
            case ASN1Identifier(tagWithNumber: 5, tagClass: .contextSpecific):
                self = .greaterOrEqual(try AttributeValueAssertion(derEncoded: rootNode))
            case ASN1Identifier(tagWithNumber: 6, tagClass: .contextSpecific):
                self = .lessOrEqual(try AttributeValueAssertion(derEncoded: rootNode))
            case ASN1Identifier(tagWithNumber: 7, tagClass: .contextSpecific):
                self = .present(try ASN1OctetString(derEncoded: rootNode))
            case ASN1Identifier(tagWithNumber: 8, tagClass: .contextSpecific):
                self = .approxMatch(try AttributeValueAssertion(derEncoded: rootNode))
            case ASN1Identifier(tagWithNumber: 9, tagClass: .contextSpecific):
                self = .extensibleMatch(try MatchingRuleAssertion(derEncoded: rootNode))

            default: throw ASN1Error.unexpectedFieldType(rootNode.identifier)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer) throws {
        switch self {
            case .and(let and):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific),
                { coder in try coder.serialize(and) })
            case .or(let or):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific),
                { coder in try coder.serialize(or) })
            case .not(let not):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 2, tagClass: .contextSpecific),
                { coder in try coder.serialize(not) })
            case .equalityMatch(let equalityMatch):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 3, tagClass: .contextSpecific),
                { coder in try coder.serialize(equalityMatch) })
            case .substrings(let substrings):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 4, tagClass: .contextSpecific),
                { coder in try coder.serialize(substrings) })
            case .greaterOrEqual(let greaterOrEqual):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 5, tagClass: .contextSpecific),
                { coder in try coder.serialize(greaterOrEqual) })
            case .lessOrEqual(let lessOrEqual):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 6, tagClass: .contextSpecific),
                { coder in try coder.serialize(lessOrEqual) })
            case .present(let present):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 7, tagClass: .contextSpecific),
                { coder in try coder.serialize(present) })
            case .approxMatch(let approxMatch):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 8, tagClass: .contextSpecific),
                { coder in try coder.serialize(approxMatch) })
            case .extensibleMatch(let extensibleMatch):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 9, tagClass: .contextSpecific),
                { coder in try coder.serialize(extensibleMatch) })

        }
    }

}
