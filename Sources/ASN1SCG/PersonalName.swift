// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

@usableFromInline struct PersonalName: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .set }
    @usableFromInline var surname: ASN1PrintableString
    @usableFromInline var given_name: ASN1PrintableString?
    @usableFromInline var initials: ASN1PrintableString?
    @usableFromInline var generation_qualifier: ASN1PrintableString?
    @inlinable init(surname: ASN1PrintableString, given_name: ASN1PrintableString?, initials: ASN1PrintableString?, generation_qualifier: ASN1PrintableString?) {
        self.surname = surname
        self.given_name = given_name
        self.initials = initials
        self.generation_qualifier = generation_qualifier
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.set(root, identifier: identifier) { nodes in
            let surname: ASN1PrintableString = (try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific)))!
            let given_name: ASN1PrintableString? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific))
            let initials: ASN1PrintableString? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 2, tagClass: .contextSpecific))
            let generation_qualifier: ASN1PrintableString? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 3, tagClass: .contextSpecific))
            return PersonalName(surname: surname, given_name: given_name, initials: initials, generation_qualifier: generation_qualifier)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serializeOptionalImplicitlyTagged(surname, withIdentifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific))
            if let given_name = self.given_name { try coder.serializeOptionalImplicitlyTagged(given_name, withIdentifier: ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific)) }
            if let initials = self.initials { try coder.serializeOptionalImplicitlyTagged(initials, withIdentifier: ASN1Identifier(tagWithNumber: 2, tagClass: .contextSpecific)) }
            if let generation_qualifier = self.generation_qualifier { try coder.serializeOptionalImplicitlyTagged(generation_qualifier, withIdentifier: ASN1Identifier(tagWithNumber: 3, tagClass: .contextSpecific)) }
        }
    }
}
