// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

@usableFromInline struct ModifyDNRequest: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var entry: ASN1OctetString
    @usableFromInline var newrdn: ASN1OctetString
    @usableFromInline var deleteoldrdn: Bool
    @usableFromInline var newSuperior: ASN1OctetString?
    @inlinable init(entry: ASN1OctetString, newrdn: ASN1OctetString, deleteoldrdn: Bool, newSuperior: ASN1OctetString?) {
        self.entry = entry
        self.newrdn = newrdn
        self.deleteoldrdn = deleteoldrdn
        self.newSuperior = newSuperior
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let entry: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let newrdn: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let deleteoldrdn: Bool = try Bool(derEncoded: &nodes)
            let newSuperior: ASN1OctetString? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific))
            return ModifyDNRequest(entry: entry, newrdn: newrdn, deleteoldrdn: deleteoldrdn, newSuperior: newSuperior)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(entry)
            try coder.serialize(newrdn)
            try coder.serialize(deleteoldrdn)
            if let newSuperior = self.newSuperior { try coder.serializeOptionalImplicitlyTagged(newSuperior, withIdentifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific)) }
        }
    }
}
