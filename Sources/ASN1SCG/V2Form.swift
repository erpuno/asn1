// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

@usableFromInline struct V2Form: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var issuerName: [GeneralName]?
    @usableFromInline var baseCertificateID: IssuerSerial?
    @usableFromInline var objectDigestInfo: ObjectDigestInfo?
    @inlinable init(issuerName: [GeneralName]?, baseCertificateID: IssuerSerial?, objectDigestInfo: ObjectDigestInfo?) {
        self.issuerName = issuerName
        self.baseCertificateID = baseCertificateID
        self.objectDigestInfo = objectDigestInfo
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let issuerName: [GeneralName]? = try DER.sequence(of: GeneralName.self, identifier: .sequence, nodes: &nodes)
            let baseCertificateID: IssuerSerial? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific))
            let objectDigestInfo: ObjectDigestInfo? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific))
            return V2Form(issuerName: issuerName, baseCertificateID: baseCertificateID, objectDigestInfo: objectDigestInfo)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            if let issuerName = self.issuerName { try coder.serializeSequenceOf(issuerName) }
            if let baseCertificateID = self.baseCertificateID { try coder.serializeOptionalImplicitlyTagged(baseCertificateID, withIdentifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific)) }
            if let objectDigestInfo = self.objectDigestInfo { try coder.serializeOptionalImplicitlyTagged(objectDigestInfo, withIdentifier: ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific)) }
        }
    }
}
