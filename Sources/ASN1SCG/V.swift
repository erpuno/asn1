// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

/*
  V ::= SEQUENCE {
    a [1] IMPLICIT SET OF INTEGER (0..7),
    b [2] EXPLICIT SET OF INTEGER (0..7),
    c [3] IMPLICIT INTEGER (0..7),
    d [4] EXPLICIT INTEGER (0..7),
    e [5] IMPLICIT BOOLEAN,
    f [6] EXPLICIT BOOLEAN,
    g [7] EXPLICIT SET OF INTEGER (0..7) OPTIONAL,
    h [8] IMPLICIT SET OF INTEGER (0..7) OPTIONAL,
    i [9] IMPLICIT INTEGER (0..7) OPTIONAL,
    j [0] EXPLICIT INTEGER (0..7) OPTIONAL,
    k OCTET STRING OPTIONAL,
    l BOOLEAN OPTIONAL
  }
*/

@usableFromInline struct V: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var a: [ArraySlice<UInt8>]
    @usableFromInline var b: [ArraySlice<UInt8>]
    @usableFromInline var c: ArraySlice<UInt8>
    @usableFromInline var d: ArraySlice<UInt8>
    @usableFromInline var e: Bool
    @usableFromInline var f: Bool
    @usableFromInline var g: [ArraySlice<UInt8>]?
    @usableFromInline var h: [ArraySlice<UInt8>]?
    @usableFromInline var i: ArraySlice<UInt8>?
    @usableFromInline var j: ArraySlice<UInt8>?
    @usableFromInline var k: ASN1OctetString?
    @usableFromInline var l: Bool?
    @inlinable init(a: [ArraySlice<UInt8>], b: [ArraySlice<UInt8>], c: ArraySlice<UInt8>, d: ArraySlice<UInt8>, e: Bool, f: Bool, g: [ArraySlice<UInt8>]?, h: [ArraySlice<UInt8>]?, i: ArraySlice<UInt8>?, j: ArraySlice<UInt8>?, k: ASN1OctetString?, l: Bool?) {
        self.a = a
        self.b = b
        self.c = c
        self.d = d
        self.e = e
        self.f = f
        self.g = g
        self.h = h
        self.i = i
        self.j = j
        self.k = k
        self.l = l
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let a: [ArraySlice<UInt8>] = (try DER.optionalImplicitlyTagged(&nodes, tagNumber: 1, tagClass: .contextSpecific) { node in return try DER.set(of: ArraySlice<UInt8>.self, identifier: .set, rootNode: node) })!
            let b: [ArraySlice<UInt8>] = (try DER.optionalExplicitlyTagged(&nodes, tagNumber: 2, tagClass: .contextSpecific) { node in return try DER.set(of: ArraySlice<UInt8>.self, identifier: .set, rootNode: node) })!
            let c: ArraySlice<UInt8> = try ArraySlice<UInt8>(derEncoded: &nodes)
            let d: ArraySlice<UInt8> = try DER.explicitlyTagged(&nodes, tagNumber: 4, tagClass: .contextSpecific) { node in try ArraySlice<UInt8>(derEncoded: node) }
            let e: Bool = try Bool(derEncoded: &nodes)
            let f: Bool = try DER.explicitlyTagged(&nodes, tagNumber: 6, tagClass: .contextSpecific) { node in try Bool(derEncoded: node) }
            let g: [ArraySlice<UInt8>]? = try DER.optionalExplicitlyTagged(&nodes, tagNumber: 7, tagClass: .contextSpecific) { node in return try DER.set(of: ArraySlice<UInt8>.self, identifier: .set, rootNode: node) }
            let h: [ArraySlice<UInt8>]? = try DER.optionalImplicitlyTagged(&nodes, tagNumber: 8, tagClass: .contextSpecific) { node in return try DER.set(of: ArraySlice<UInt8>.self, identifier: .set, rootNode: node) }
            let i: ArraySlice<UInt8>? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 9, tagClass: .contextSpecific))
            let j: ArraySlice<UInt8>? = try DER.optionalExplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific))
            let k: ASN1OctetString? = try ASN1OctetString(derEncoded: &nodes)
            let l: Bool? = try Bool(derEncoded: &nodes)
            return V(a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h, i: i, j: j, k: k, l: l)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.appendConstructedNode(identifier: .set) { codec in for x in a { try codec.serialize(x) } }
            try coder.appendConstructedNode(identifier: .set) { codec in for x in b { try codec.serialize(x) } }
            try coder.serializeOptionalImplicitlyTagged(c, withIdentifier: ASN1Identifier(tagWithNumber: 3, tagClass: .contextSpecific))
            try coder.serialize(explicitlyTaggedWithTagNumber: 4, tagClass: .contextSpecific) { coder in try coder.serialize(d) }
            try coder.serializeOptionalImplicitlyTagged(e, withIdentifier: ASN1Identifier(tagWithNumber: 5, tagClass: .contextSpecific))
            try coder.serialize(explicitlyTaggedWithTagNumber: 6, tagClass: .contextSpecific) { coder in try coder.serialize(f) }
            if let g = self.g { try coder.appendConstructedNode(identifier: .set) { codec in for x in g { try codec.serialize(x) } } }
            if let h = self.h { try coder.appendConstructedNode(identifier: .set) { codec in for x in h { try codec.serialize(x) } } }
            if let i = self.i { try coder.serializeOptionalImplicitlyTagged(i, withIdentifier: ASN1Identifier(tagWithNumber: 9, tagClass: .contextSpecific)) }
            if let j = self.j { try coder.serialize(explicitlyTaggedWithTagNumber: 0, tagClass: .contextSpecific) { coder in try coder.serialize(j) } }
            if let k = self.k { try coder.serialize(k) }
            if let l = self.l { try coder.serialize(l) }
        }
    }
}
