// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

@usableFromInline struct V: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var a: ArraySlice<UInt8>?
    @usableFromInline var b: Bool
    @usableFromInline var c: [ArraySlice<UInt8>]?
    @usableFromInline var d: Bool?
    @inlinable init(a: ArraySlice<UInt8>?, b: Bool, c: [ArraySlice<UInt8>]?, d: Bool?) {
        self.a = a
        self.b = b
        self.c = c
        self.d = d
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let a: ArraySlice<UInt8>? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific))
            let b: Bool = try Bool(derEncoded: &nodes)
            let c: [ArraySlice<UInt8>]? = try DER.optionalExplicitlyTagged(&nodes, tagNumber: 3, tagClass: .contextSpecific) { node in return try DER.set(of: ArraySlice<UInt8>.self, identifier: .set, rootNode: node) }
            let d: Bool? = try Bool(derEncoded: &nodes)
            return V(a: a, b: b, c: c, d: d)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            if let a = self.a { try coder.serializeOptionalImplicitlyTagged(a, withIdentifier: ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific)) }
            try coder.serializeOptionalImplicitlyTagged(b, withIdentifier: ASN1Identifier(tagWithNumber: 2, tagClass: .contextSpecific))
            if let c = self.c { try coder.appendConstructedNode(identifier: .set) { codec in for x in c { try codec.serialize(x) } } }
            if let d = self.d { try coder.serialize(d) }
        }
    }
}
