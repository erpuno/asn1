// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

@usableFromInline struct Service: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var id: ASN1OctetString
    @usableFromInline var type: ServiceType
    @usableFromInline var data: ASN1OctetString
    @usableFromInline var login: ASN1OctetString
    @usableFromInline var password: ASN1OctetString
    @usableFromInline var expiration: ArraySlice<UInt8>
    @usableFromInline var status: ServiceStatus
    @inlinable init(id: ASN1OctetString, type: ServiceType, data: ASN1OctetString, login: ASN1OctetString, password: ASN1OctetString, expiration: ArraySlice<UInt8>, status: ServiceStatus) {
        self.id = id
        self.type = type
        self.data = data
        self.login = login
        self.password = password
        self.expiration = expiration
        self.status = status
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let id = try ASN1OctetString(derEncoded: &nodes)
            let type = try ServiceType(derEncoded: &nodes)
            let data = try ASN1OctetString(derEncoded: &nodes)
            let login = try ASN1OctetString(derEncoded: &nodes)
            let password = try ASN1OctetString(derEncoded: &nodes)
            let expiration = try ArraySlice<UInt8>(derEncoded: &nodes)
            let status = try ServiceStatus(derEncoded: &nodes)
            return Service(id: id, type: type, data: data, login: login, password: password, expiration: expiration, status: status)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(self.id)
            try coder.serialize(self.type)
            try coder.serialize(self.data)
            try coder.serialize(self.login)
            try coder.serialize(self.password)
            try coder.serialize(self.expiration)
            try coder.serialize(self.status)
        }
    }
}
