// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

@usableFromInline struct ObjectDigestInfo: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var digestedObjectType: ObjectDigestInfo_digestedObjectType_Enum
    @usableFromInline var otherObjectTypeID: ASN1ObjectIdentifier?
    @usableFromInline var digestAlgorithm: AlgorithmIdentifier
    @usableFromInline var objectDigest: ASN1BitString
    @inlinable init(digestedObjectType: ObjectDigestInfo_digestedObjectType_Enum, otherObjectTypeID: ASN1ObjectIdentifier?, digestAlgorithm: AlgorithmIdentifier, objectDigest: ASN1BitString) {
        self.digestedObjectType = digestedObjectType
        self.otherObjectTypeID = otherObjectTypeID
        self.digestAlgorithm = digestAlgorithm
        self.objectDigest = objectDigest
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let digestedObjectType: ObjectDigestInfo_digestedObjectType_Enum = try ObjectDigestInfo_digestedObjectType_Enum(derEncoded: &nodes)
            let otherObjectTypeID: ASN1ObjectIdentifier? = try ASN1ObjectIdentifier(derEncoded: &nodes)
            let digestAlgorithm: AlgorithmIdentifier = try AlgorithmIdentifier(derEncoded: &nodes)
            let objectDigest: ASN1BitString = try ASN1BitString(derEncoded: &nodes)
            return ObjectDigestInfo(digestedObjectType: digestedObjectType, otherObjectTypeID: otherObjectTypeID, digestAlgorithm: digestAlgorithm, objectDigest: objectDigest)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(digestedObjectType)
            if let otherObjectTypeID = self.otherObjectTypeID { try coder.serialize(otherObjectTypeID) }
            try coder.serialize(digestAlgorithm)
            try coder.serialize(objectDigest)
        }
    }
}
