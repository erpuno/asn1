// Generated by ASN1.ERP.UNO Compiler, Copyright © 2023—2024 Namdak Tönpa.
import SwiftASN1
import Foundation

@usableFromInline struct SignerInfo: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var version: Int
    @usableFromInline var sid: SignerIdentifier
    @usableFromInline var digestAlgorithm: AlgorithmIdentifier
    @usableFromInline var signedAttrs: [PartialAttribute]?
    @usableFromInline var signatureAlgorithm: AlgorithmIdentifier
    @usableFromInline var signature: ASN1OctetString
    @usableFromInline var unsignedAttrs: [PartialAttribute]?
    @inlinable init(version: Int, sid: SignerIdentifier, digestAlgorithm: AlgorithmIdentifier, signedAttrs: [PartialAttribute]?, signatureAlgorithm: AlgorithmIdentifier, signature: ASN1OctetString, unsignedAttrs: [PartialAttribute]?) {
        self.version = version
        self.sid = sid
        self.digestAlgorithm = digestAlgorithm
        self.signedAttrs = signedAttrs
        self.signatureAlgorithm = signatureAlgorithm
        self.signature = signature
        self.unsignedAttrs = unsignedAttrs
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let version: Int = try Int(derEncoded: &nodes)
            let sid: SignerIdentifier = try SignerIdentifier(derEncoded: &nodes)
            let digestAlgorithm: AlgorithmIdentifier = try AlgorithmIdentifier(derEncoded: &nodes)
            let signedAttrs: [PartialAttribute] = try DER.set(of: PartialAttribute.self, identifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific), nodes: &nodes)
            let signatureAlgorithm: AlgorithmIdentifier = try AlgorithmIdentifier(derEncoded: &nodes)
            let signature: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let unsignedAttrs: [PartialAttribute] = try DER.set(of: PartialAttribute.self, identifier: ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific), nodes: &nodes)
            return SignerInfo(version: version, sid: sid, digestAlgorithm: digestAlgorithm, signedAttrs: signedAttrs, signatureAlgorithm: signatureAlgorithm, signature: signature, unsignedAttrs: unsignedAttrs)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(version)
            try coder.serialize(sid)
            try coder.serialize(digestAlgorithm)
            if let signedAttrs = self.signedAttrs { try coder.serializeSetOf(signedAttrs, identifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific)) }
            try coder.serialize(signatureAlgorithm)
            try coder.serialize(signature)
            if let unsignedAttrs = self.unsignedAttrs { try coder.serializeSetOf(unsignedAttrs, identifier: ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific)) }
        }
    }
}
