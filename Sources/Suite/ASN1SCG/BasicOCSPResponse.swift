// Generated by ASN1.ERP.UNO Compiler, Copyright © 2023—2024 Namdak Tönpa.
import SwiftASN1
import Foundation

@usableFromInline struct BasicOCSPResponse: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var tbsResponseData: ResponseData
    @usableFromInline var signatureAlgorithm: AlgorithmIdentifier
    @usableFromInline var signature: ASN1BitString
    @usableFromInline var certs: [Certificate]?
    @inlinable init(tbsResponseData: ResponseData, signatureAlgorithm: AlgorithmIdentifier, signature: ASN1BitString, certs: [Certificate]?) {
        self.tbsResponseData = tbsResponseData
        self.signatureAlgorithm = signatureAlgorithm
        self.signature = signature
        self.certs = certs
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let tbsResponseData: ResponseData = try ResponseData(derEncoded: &nodes)
            let signatureAlgorithm: AlgorithmIdentifier = try AlgorithmIdentifier(derEncoded: &nodes)
            let signature: ASN1BitString = try ASN1BitString(derEncoded: &nodes)
            let certs: [Certificate]? = try DER.optionalExplicitlyTagged(&nodes, tagNumber: 0, tagClass: .contextSpecific) { node in try DER.sequence(of: Certificate.self, identifier: .sequence, rootNode: node) }
            return BasicOCSPResponse(tbsResponseData: tbsResponseData, signatureAlgorithm: signatureAlgorithm, signature: signature, certs: certs)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(tbsResponseData)
            try coder.serialize(signatureAlgorithm)
            try coder.serialize(signature)
            if let certs = self.certs { try coder.serialize(explicitlyTaggedWithTagNumber: 0, tagClass: .contextSpecific) { codec in try codec.serializeSequenceOf(certs) } }
        }
    }
}
