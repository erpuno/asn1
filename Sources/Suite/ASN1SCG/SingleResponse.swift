// Generated by ASN1.ERP.UNO Compiler, Copyright © 2023—2024 Namdak Tönpa.
import SwiftASN1
import Foundation

@usableFromInline struct SingleResponse: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var certID: CertID
    @usableFromInline var certStatus: CertStatus
    @usableFromInline var thisUpdate: GeneralizedTime
    @usableFromInline var nextUpdate: GeneralizedTime?
    @usableFromInline var singleExtensions: [Extension]?
    @inlinable init(certID: CertID, certStatus: CertStatus, thisUpdate: GeneralizedTime, nextUpdate: GeneralizedTime?, singleExtensions: [Extension]?) {
        self.certID = certID
        self.certStatus = certStatus
        self.thisUpdate = thisUpdate
        self.nextUpdate = nextUpdate
        self.singleExtensions = singleExtensions
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let certID: CertID = try CertID(derEncoded: &nodes)
            let certStatus: CertStatus = try CertStatus(derEncoded: &nodes)
            let thisUpdate: GeneralizedTime = try GeneralizedTime(derEncoded: &nodes)
            let nextUpdate: GeneralizedTime? = try DER.optionalExplicitlyTagged(&nodes, tagNumber: 0, tagClass: .contextSpecific) { node in return try GeneralizedTime(derEncoded: node) }
            let singleExtensions: [Extension]? = try DER.optionalExplicitlyTagged(&nodes, tagNumber: 1, tagClass: .contextSpecific) { node in try DER.sequence(of: Extension.self, identifier: .sequence, rootNode: node) }
            return SingleResponse(certID: certID, certStatus: certStatus, thisUpdate: thisUpdate, nextUpdate: nextUpdate, singleExtensions: singleExtensions)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(certID)
            try coder.serialize(certStatus)
            try coder.serialize(thisUpdate)
            if let nextUpdate = self.nextUpdate { try coder.serialize(explicitlyTaggedWithTagNumber: 0, tagClass: .contextSpecific) { codec in try codec.serialize(nextUpdate) } }
            if let singleExtensions = self.singleExtensions { try coder.serialize(explicitlyTaggedWithTagNumber: 1, tagClass: .contextSpecific) { codec in try codec.serializeSequenceOf(singleExtensions) } }
        }
    }
}
