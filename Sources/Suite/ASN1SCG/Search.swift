// Generated by ASN1.ERP.UNO Compiler, Copyright © 2023—2024 Namdak Tönpa.
import SwiftASN1
import Foundation

@usableFromInline struct Search: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var dn: ASN1OctetString
    @usableFromInline var id: ASN1OctetString
    @usableFromInline var field: ASN1OctetString
    @usableFromInline var value: ASN1OctetString
    @usableFromInline var criteria: Criteria
    @usableFromInline var type: Scope
    @usableFromInline var status: SearchStatus
    @inlinable init(dn: ASN1OctetString, id: ASN1OctetString, field: ASN1OctetString, value: ASN1OctetString, criteria: Criteria, type: Scope, status: SearchStatus) {
        self.dn = dn
        self.id = id
        self.field = field
        self.value = value
        self.criteria = criteria
        self.type = type
        self.status = status
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let dn: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let id: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let field: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let value: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let criteria: Criteria = try Criteria(derEncoded: &nodes)
            let type: Scope = try Scope(derEncoded: &nodes)
            let status: SearchStatus = try SearchStatus(derEncoded: &nodes)
            return Search(dn: dn, id: id, field: field, value: value, criteria: criteria, type: type, status: status)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(dn)
            try coder.serialize(id)
            try coder.serialize(field)
            try coder.serialize(value)
            try coder.serialize(criteria)
            try coder.serialize(type)
            try coder.serialize(status)
        }
    }
}
