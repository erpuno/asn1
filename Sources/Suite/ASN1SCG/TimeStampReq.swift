// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Foundation

@usableFromInline struct TimeStampReq: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var version: TimeStampReq_version_IntEnum
    @usableFromInline var messageImprint: MessageImprint
    @usableFromInline var reqPolicy: ASN1ObjectIdentifier?
    @usableFromInline var nonce: ArraySlice<UInt8>?
    @usableFromInline var certReq: Bool
    @usableFromInline var extensions: [Extension]?
    @inlinable init(version: TimeStampReq_version_IntEnum, messageImprint: MessageImprint, reqPolicy: ASN1ObjectIdentifier?, nonce: ArraySlice<UInt8>?, certReq: Bool, extensions: [Extension]?) {
        self.version = version
        self.messageImprint = messageImprint
        self.reqPolicy = reqPolicy
        self.nonce = nonce
        self.certReq = certReq
        self.extensions = extensions
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let version = try TimeStampReq_version_IntEnum(rawValue: Int(derEncoded: &nodes))
            let messageImprint: MessageImprint = try MessageImprint(derEncoded: &nodes)
            let reqPolicy: ASN1ObjectIdentifier? = try ASN1ObjectIdentifier(derEncoded: &nodes)
            let nonce: ArraySlice<UInt8>? = try ArraySlice<UInt8>(derEncoded: &nodes)
            let certReq: Bool = try DER.decodeDefault(&nodes, defaultValue: false)
            let extensions: [Extension] = try DER.sequence(of: Extension.self, identifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific), nodes: &nodes)
            return TimeStampReq(version: version, messageImprint: messageImprint, reqPolicy: reqPolicy, nonce: nonce, certReq: certReq, extensions: extensions)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(version.rawValue)
            try coder.serialize(messageImprint)
            if let reqPolicy = self.reqPolicy { try coder.serialize(reqPolicy) }
            if let nonce = self.nonce { try coder.serialize(nonce) }
            try coder.serialize(certReq)
            if let extensions = self.extensions { try coder.serializeSequenceOf(extensions, identifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific)) }
        }
    }
}
