// Generated by ASN1.ERP.UNO Compiler, Copyright © 2023—2024 Namdak Tönpa.
import SwiftASN1
import Foundation

@usableFromInline struct Accuracy: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var seconds: ArraySlice<UInt8>?
    @usableFromInline var millis: ArraySlice<UInt8>?
    @usableFromInline var micros: ArraySlice<UInt8>?
    @inlinable init(seconds: ArraySlice<UInt8>?, millis: ArraySlice<UInt8>?, micros: ArraySlice<UInt8>?) {
        self.seconds = seconds
        self.millis = millis
        self.micros = micros
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let seconds: ArraySlice<UInt8>? = try ArraySlice<UInt8>(derEncoded: &nodes)
            let millis: ArraySlice<UInt8>? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific))
            let micros: ArraySlice<UInt8>? = try DER.optionalImplicitlyTagged(&nodes, tag: ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific))
            return Accuracy(seconds: seconds, millis: millis, micros: micros)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            if let seconds = self.seconds { try coder.serialize(seconds) }
            if let millis = self.millis { try coder.serializeOptionalImplicitlyTagged(millis, withIdentifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific)) }
            if let micros = self.micros { try coder.serializeOptionalImplicitlyTagged(micros, withIdentifier: ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific)) }
        }
    }
}
