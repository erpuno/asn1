// Generated by ASN1.ERP.UNO Compiler, Copyright © 2023—2024 Namdak Tönpa.
import SwiftASN1
import Foundation

@usableFromInline indirect enum GeneralName: DERImplicitlyTaggable, DERParseable, DERSerializable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .enumerated }
    case otherName(GeneralName)
    case rfc822Name(ASN1IA5String)
    case dNSName(ASN1IA5String)
    case directoryName(Name)
    case uniformResourceIdentifier(ASN1IA5String)
    case iPAddress(ASN1OctetString)
    case registeredID(ASN1ObjectIdentifier)
    @inlinable init(derEncoded rootNode: ASN1Node, withIdentifier: ASN1Identifier) throws {
        switch rootNode.identifier {
            case ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific):
                self = .otherName(try GeneralName(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific):
                self = .rfc822Name(try ASN1IA5String(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 2, tagClass: .contextSpecific):
                self = .dNSName(try ASN1IA5String(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 4, tagClass: .contextSpecific):
                guard case .constructed(let nodes) = rootNode.content else { preconditionFailure("Explicit tags are always constructed") }
                var i = nodes.makeIterator()
                guard let child = i.next() else { throw ASN1Error.invalidASN1Object(reason: "Empty child") }
                self = .directoryName(try Name(derEncoded: child))
            case ASN1Identifier(tagWithNumber: 6, tagClass: .contextSpecific):
                self = .uniformResourceIdentifier(try ASN1IA5String(derEncoded: rootNode))
            case ASN1Identifier(tagWithNumber: 7, tagClass: .contextSpecific):
                self = .iPAddress(try ASN1OctetString(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 8, tagClass: .contextSpecific):
                self = .registeredID(try ASN1ObjectIdentifier(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            default: throw ASN1Error.unexpectedFieldType(rootNode.identifier)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer, withIdentifier: ASN1Identifier) throws {
        switch self {
            case .otherName(let otherName):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific),
                { coder in try coder.serialize(otherName) })
            case .rfc822Name(let rfc822Name):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific),
                { coder in try coder.serialize(rfc822Name) })
            case .dNSName(let dNSName):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 2, tagClass: .contextSpecific),
                { coder in try coder.serialize(dNSName) })
            case .directoryName(let directoryName):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 4, tagClass: .contextSpecific),
                { coder in try coder.serialize(directoryName)})
            case .uniformResourceIdentifier(let uniformResourceIdentifier):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 6, tagClass: .contextSpecific),
                { coder in try coder.serialize(uniformResourceIdentifier) })
            case .iPAddress(let iPAddress):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 7, tagClass: .contextSpecific),
                { coder in try coder.serialize(iPAddress) })
            case .registeredID(let registeredID):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 8, tagClass: .contextSpecific),
                { coder in try coder.serialize(registeredID) })
        }
    }

}
