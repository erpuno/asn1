// Generated by ASN1.ERP.UNO Compiler, Copyright © 2023—2024 Namdak Tönpa.
import SwiftASN1
import Foundation

@usableFromInline struct SearchRequest: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var baseObject: ASN1OctetString
    @usableFromInline var scope: SearchRequest_scope_Enum
    @usableFromInline var derefAliases: SearchRequest_derefAliases_Enum
    @usableFromInline var sizeLimit: ArraySlice<UInt8>
    @usableFromInline var timeLimit: ArraySlice<UInt8>
    @usableFromInline var typesOnly: Bool
    @usableFromInline var filter: Filter
    @usableFromInline var attributes: [ASN1OctetString]
    @inlinable init(baseObject: ASN1OctetString, scope: SearchRequest_scope_Enum, derefAliases: SearchRequest_derefAliases_Enum, sizeLimit: ArraySlice<UInt8>, timeLimit: ArraySlice<UInt8>, typesOnly: Bool, filter: Filter, attributes: [ASN1OctetString]) {
        self.baseObject = baseObject
        self.scope = scope
        self.derefAliases = derefAliases
        self.sizeLimit = sizeLimit
        self.timeLimit = timeLimit
        self.typesOnly = typesOnly
        self.filter = filter
        self.attributes = attributes
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let baseObject: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let scope: SearchRequest_scope_Enum = try SearchRequest_scope_Enum(derEncoded: &nodes)
            let derefAliases: SearchRequest_derefAliases_Enum = try SearchRequest_derefAliases_Enum(derEncoded: &nodes)
            let sizeLimit: ArraySlice<UInt8> = try ArraySlice<UInt8>(derEncoded: &nodes)
            let timeLimit: ArraySlice<UInt8> = try ArraySlice<UInt8>(derEncoded: &nodes)
            let typesOnly: Bool = try DER.decodeDefault(&nodes, defaultValue: false)
            let filter: Filter = try Filter(derEncoded: &nodes)
            let attributes: [ASN1OctetString] = try DER.sequence(of: ASN1OctetString.self, identifier: .sequence, nodes: &nodes)
            return SearchRequest(baseObject: baseObject, scope: scope, derefAliases: derefAliases, sizeLimit: sizeLimit, timeLimit: timeLimit, typesOnly: typesOnly, filter: filter, attributes: attributes)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(baseObject)
            try coder.serialize(scope)
            try coder.serialize(derefAliases)
            try coder.serialize(sizeLimit)
            try coder.serialize(timeLimit)
            try coder.serialize(typesOnly)
            try coder.serialize(filter)
            try coder.serializeSequenceOf(attributes)
        }
    }
}
