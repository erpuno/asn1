// Generated by ASN1.ERP.UNO Compiler, Copyright © 2023—2024 Namdak Tönpa.
import SwiftASN1
import Foundation

@usableFromInline struct Certificate: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var tbsCertificate: TBSCertificate
    @usableFromInline var signatureAlgorithm: AlgorithmIdentifier
    @usableFromInline var signatureValue: ASN1BitString
    @inlinable init(tbsCertificate: TBSCertificate, signatureAlgorithm: AlgorithmIdentifier, signatureValue: ASN1BitString) {
        self.tbsCertificate = tbsCertificate
        self.signatureAlgorithm = signatureAlgorithm
        self.signatureValue = signatureValue
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let tbsCertificate: TBSCertificate = try TBSCertificate(derEncoded: &nodes)
            let signatureAlgorithm: AlgorithmIdentifier = try AlgorithmIdentifier(derEncoded: &nodes)
            let signatureValue: ASN1BitString = try ASN1BitString(derEncoded: &nodes)
            return Certificate(tbsCertificate: tbsCertificate, signatureAlgorithm: signatureAlgorithm, signatureValue: signatureValue)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(tbsCertificate)
            try coder.serialize(signatureAlgorithm)
            try coder.serialize(signatureValue)
        }
    }
}
