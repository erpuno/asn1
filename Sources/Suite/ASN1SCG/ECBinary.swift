// Generated by ASN1.ERP.UNO Compiler, Copyright © 2023—2024 Namdak Tönpa.
import SwiftASN1
import Foundation

@usableFromInline struct ECBinary: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var version: ArraySlice<UInt8>
    @usableFromInline var f: BinaryField
    @usableFromInline var a: ArraySlice<UInt8>
    @usableFromInline var b: ASN1OctetString
    @usableFromInline var n: ArraySlice<UInt8>
    @usableFromInline var bp: ASN1OctetString
    @inlinable init(version: ArraySlice<UInt8>, f: BinaryField, a: ArraySlice<UInt8>, b: ASN1OctetString, n: ArraySlice<UInt8>, bp: ASN1OctetString) {
        self.version = version
        self.f = f
        self.a = a
        self.b = b
        self.n = n
        self.bp = bp
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let version: ArraySlice<UInt8> = try DER.explicitlyTagged(&nodes, tagNumber: 0, tagClass: .contextSpecific) { node in return try ArraySlice<UInt8>(derEncoded: node) }
            let f: BinaryField = try BinaryField(derEncoded: &nodes)
            let a: ArraySlice<UInt8> = try ArraySlice<UInt8>(derEncoded: &nodes)
            let b: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let n: ArraySlice<UInt8> = try ArraySlice<UInt8>(derEncoded: &nodes)
            let bp: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            return ECBinary(version: version, f: f, a: a, b: b, n: n, bp: bp)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(explicitlyTaggedWithTagNumber: 0, tagClass: .contextSpecific) { codec in try codec.serialize(version) }
            try coder.serialize(f)
            try coder.serialize(a)
            try coder.serialize(b)
            try coder.serialize(n)
            try coder.serialize(bp)
        }
    }
}
