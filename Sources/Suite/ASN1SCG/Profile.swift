// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Foundation

@usableFromInline struct Profile: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var nickname: ASN1OctetString
    @usableFromInline var phone: ASN1OctetString
    @usableFromInline var session: ASN1OctetString
    @usableFromInline var chats: [Contact]
    @usableFromInline var contacts: [Contact]
    @usableFromInline var keys: [ASN1OctetString]
    @usableFromInline var servers: [Server]
    @usableFromInline var settings: [Feature]
    @usableFromInline var update: ArraySlice<UInt8>
    @usableFromInline var status: ArraySlice<UInt8>
    @usableFromInline var roster: Roster
    @inlinable init(nickname: ASN1OctetString, phone: ASN1OctetString, session: ASN1OctetString, chats: [Contact], contacts: [Contact], keys: [ASN1OctetString], servers: [Server], settings: [Feature], update: ArraySlice<UInt8>, status: ArraySlice<UInt8>, roster: Roster) {
        self.nickname = nickname
        self.phone = phone
        self.session = session
        self.chats = chats
        self.contacts = contacts
        self.keys = keys
        self.servers = servers
        self.settings = settings
        self.update = update
        self.status = status
        self.roster = roster
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let nickname: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let phone: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let session: ASN1OctetString = try ASN1OctetString(derEncoded: &nodes)
            let chats: [Contact] = try DER.sequence(of: Contact.self, identifier: .sequence, nodes: &nodes)
            let contacts: [Contact] = try DER.sequence(of: Contact.self, identifier: .sequence, nodes: &nodes)
            let keys: [ASN1OctetString] = try DER.sequence(of: ASN1OctetString.self, identifier: .sequence, nodes: &nodes)
            let servers: [Server] = try DER.sequence(of: Server.self, identifier: .sequence, nodes: &nodes)
            let settings: [Feature] = try DER.sequence(of: Feature.self, identifier: .sequence, nodes: &nodes)
            let update: ArraySlice<UInt8> = try ArraySlice<UInt8>(derEncoded: &nodes)
            let status: ArraySlice<UInt8> = try ArraySlice<UInt8>(derEncoded: &nodes)
            let roster: Roster = try Roster(derEncoded: &nodes)
            return Profile(nickname: nickname, phone: phone, session: session, chats: chats, contacts: contacts, keys: keys, servers: servers, settings: settings, update: update, status: status, roster: roster)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(nickname)
            try coder.serialize(phone)
            try coder.serialize(session)
            try coder.serializeSequenceOf(chats)
            try coder.serializeSequenceOf(contacts)
            try coder.serializeSequenceOf(keys)
            try coder.serializeSequenceOf(servers)
            try coder.serializeSequenceOf(settings)
            try coder.serialize(update)
            try coder.serialize(status)
            try coder.serialize(roster)
        }
    }
}
