// Generated by ASN1.ERP.UNO Compiler, Copyright © 2023—2024 Namdak Tönpa.
import SwiftASN1
import Foundation

@usableFromInline indirect enum LDAPMessage_protocolOp_Choice: DERImplicitlyTaggable, DERParseable, DERSerializable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .enumerated }
    case bindRequest(BindRequest)
    case bindResponse(BindResponse)
    case unbindRequest(ASN1Null)
    case searchRequest(SearchRequest)
    case searchResEntry(SearchResultEntry)
    case searchResDone(LDAPResult)
    case searchResRef([ASN1OctetString])
    case modifyRequest(ModifyRequest)
    case modifyResponse(LDAPResult)
    case addRequest(AddRequest)
    case addResponse(LDAPResult)
    case delRequest(ASN1OctetString)
    case delResponse(LDAPResult)
    case modDNRequest(ModifyDNRequest)
    case modDNResponse(LDAPResult)
    case compareRequest(CompareRequest)
    case compareResponse(LDAPResult)
    case abandonRequest(ArraySlice<UInt8>)
    case extendedReq(ExtendedRequest)
    case extendedResp(ExtendedResponse)
    case intermediateResponse(IntermediateResponse)
    @inlinable init(derEncoded rootNode: ASN1Node, withIdentifier: ASN1Identifier) throws {
        switch rootNode.identifier {
            case ASN1Identifier(tagWithNumber: 0, tagClass: .application):
                self = .bindRequest(try BindRequest(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 1, tagClass: .application):
                self = .bindResponse(try BindResponse(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 2, tagClass: .application):
                self = .unbindRequest(try ASN1Null(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 3, tagClass: .application):
                self = .searchRequest(try SearchRequest(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 4, tagClass: .application):
                self = .searchResEntry(try SearchResultEntry(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 5, tagClass: .application):
                self = .searchResDone(try LDAPResult(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 6, tagClass: .application):
                self = .searchResRef(try DER.sequence(of: ASN1OctetString.self, identifier: .sequence, rootNode: rootNode))
            case ASN1Identifier(tagWithNumber: 7, tagClass: .application):
                self = .modifyRequest(try ModifyRequest(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 8, tagClass: .application):
                self = .modifyResponse(try LDAPResult(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 9, tagClass: .application):
                self = .addRequest(try AddRequest(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 10, tagClass: .application):
                self = .addResponse(try LDAPResult(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 11, tagClass: .application):
                self = .delRequest(try ASN1OctetString(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 12, tagClass: .application):
                self = .delResponse(try LDAPResult(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 13, tagClass: .application):
                self = .modDNRequest(try ModifyDNRequest(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 14, tagClass: .application):
                self = .modDNResponse(try LDAPResult(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 15, tagClass: .application):
                self = .compareRequest(try CompareRequest(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 16, tagClass: .application):
                self = .compareResponse(try LDAPResult(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 17, tagClass: .application):
                self = .abandonRequest(try ArraySlice<UInt8>(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 18, tagClass: .application):
                self = .extendedReq(try ExtendedRequest(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 19, tagClass: .application):
                self = .extendedResp(try ExtendedResponse(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 21, tagClass: .application):
                self = .intermediateResponse(try IntermediateResponse(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            default: throw ASN1Error.unexpectedFieldType(rootNode.identifier)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer, withIdentifier: ASN1Identifier) throws {
        switch self {
            case .bindRequest(let bindRequest):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 0, tagClass: .application),
                { coder in try coder.serialize(bindRequest) })
            case .bindResponse(let bindResponse):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 1, tagClass: .application),
                { coder in try coder.serialize(bindResponse) })
            case .unbindRequest(let unbindRequest):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 2, tagClass: .application),
                { coder in try coder.serialize(unbindRequest) })
            case .searchRequest(let searchRequest):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 3, tagClass: .application),
                { coder in try coder.serialize(searchRequest) })
            case .searchResEntry(let searchResEntry):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 4, tagClass: .application),
                { coder in try coder.serialize(searchResEntry) })
            case .searchResDone(let searchResDone):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 5, tagClass: .application),
                { coder in try coder.serialize(searchResDone) })
            case .searchResRef(let searchResRef):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 6, tagClass: .application),
                { coder in try coder.serializeSequenceOf(searchResRef) })
            case .modifyRequest(let modifyRequest):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 7, tagClass: .application),
                { coder in try coder.serialize(modifyRequest) })
            case .modifyResponse(let modifyResponse):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 8, tagClass: .application),
                { coder in try coder.serialize(modifyResponse) })
            case .addRequest(let addRequest):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 9, tagClass: .application),
                { coder in try coder.serialize(addRequest) })
            case .addResponse(let addResponse):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 10, tagClass: .application),
                { coder in try coder.serialize(addResponse) })
            case .delRequest(let delRequest):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 11, tagClass: .application),
                { coder in try coder.serialize(delRequest) })
            case .delResponse(let delResponse):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 12, tagClass: .application),
                { coder in try coder.serialize(delResponse) })
            case .modDNRequest(let modDNRequest):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 13, tagClass: .application),
                { coder in try coder.serialize(modDNRequest) })
            case .modDNResponse(let modDNResponse):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 14, tagClass: .application),
                { coder in try coder.serialize(modDNResponse) })
            case .compareRequest(let compareRequest):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 15, tagClass: .application),
                { coder in try coder.serialize(compareRequest) })
            case .compareResponse(let compareResponse):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 16, tagClass: .application),
                { coder in try coder.serialize(compareResponse) })
            case .abandonRequest(let abandonRequest):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 17, tagClass: .application),
                { coder in try coder.serialize(abandonRequest) })
            case .extendedReq(let extendedReq):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 18, tagClass: .application),
                { coder in try coder.serialize(extendedReq) })
            case .extendedResp(let extendedResp):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 19, tagClass: .application),
                { coder in try coder.serialize(extendedResp) })
            case .intermediateResponse(let intermediateResponse):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 21, tagClass: .application),
                { coder in try coder.serialize(intermediateResponse) })
        }
    }

}
