// Generated by ASN1.ERP.UNO Compiler, Copyright © 2023—2024 Namdak Tönpa.
import SwiftASN1
import Foundation

@usableFromInline indirect enum AuthenticationChoice: DERImplicitlyTaggable, DERParseable, DERSerializable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .enumerated }
    case simple(ASN1OctetString)
    case sasl(SaslCredentials)
    @inlinable init(derEncoded rootNode: ASN1Node, withIdentifier: ASN1Identifier) throws {
        switch rootNode.identifier {
            case ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific):
                self = .simple(try ASN1OctetString(derEncoded: rootNode, withIdentifier: rootNode.identifier))
            case ASN1Identifier(tagWithNumber: 3, tagClass: .contextSpecific):
                self = .sasl(try SaslCredentials(derEncoded: rootNode, withIdentifier: rootNode.identifier))

            default: throw ASN1Error.unexpectedFieldType(rootNode.identifier)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer, withIdentifier: ASN1Identifier) throws {
        switch self {
            case .simple(let simple):
                try coder.appendPrimitiveNode(identifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific)) { bytes in
                   bytes.append(contentsOf: simple.bytes)
                }

//                try coder.serialize(simple)
//                try coder.serialize(simple, explicitlyTaggedWithIdentifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific))
//                try coder.appendConstructedNode(
//                identifier: ASN1Identifier(tagWithNumber: 0, tagClass: .contextSpecific),
//                { coder in try coder.serialize(simple) })
            case .sasl(let sasl):
                try coder.appendConstructedNode(
                identifier: ASN1Identifier(tagWithNumber: 3, tagClass: .contextSpecific),
                { coder in try coder.serialize(sasl) })

        }
    }

}
