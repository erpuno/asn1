// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Foundation

@usableFromInline struct ResponseData: DERImplicitlyTaggable, Hashable, Sendable {
    @inlinable static var defaultIdentifier: ASN1Identifier { .sequence }
    @usableFromInline var version: Int
    @usableFromInline var responderID: ResponderID
    @usableFromInline var producedAt: GeneralizedTime
    @usableFromInline var responses: [SingleResponse]
    @usableFromInline var responseExtensions: [Extension]?
    @inlinable init(version: Int, responderID: ResponderID, producedAt: GeneralizedTime, responses: [SingleResponse], responseExtensions: [Extension]?) {
        self.version = version
        self.responderID = responderID
        self.producedAt = producedAt
        self.responses = responses
        self.responseExtensions = responseExtensions
    }
    @inlinable init(derEncoded root: ASN1Node,
        withIdentifier identifier: ASN1Identifier) throws {
        self = try DER.sequence(root, identifier: identifier) { nodes in
            let version: Int = try DER.explicitlyTagged(&nodes, tagNumber: 0, tagClass: .contextSpecific) { node in return try Int(derEncoded: node) }
            let responderID: ResponderID = try ResponderID(derEncoded: &nodes)
            let producedAt: GeneralizedTime = try GeneralizedTime(derEncoded: &nodes)
            let responses: [SingleResponse] = try DER.sequence(of: SingleResponse.self, identifier: .sequence, nodes: &nodes)
            let responseExtensions: [Extension]? = try DER.optionalExplicitlyTagged(&nodes, tagNumber: 1, tagClass: .contextSpecific) { node in try DER.sequence(of: Extension.self, identifier: .sequence, rootNode: node) }
            return ResponseData(version: version, responderID: responderID, producedAt: producedAt, responses: responses, responseExtensions: responseExtensions)
        }
    }
    @inlinable func serialize(into coder: inout DER.Serializer,
        withIdentifier identifier: ASN1Identifier) throws {
        try coder.appendConstructedNode(identifier: identifier) { coder in
            try coder.serialize(explicitlyTaggedWithTagNumber: 0, tagClass: .contextSpecific) { codec in try codec.serialize(version) }
            try coder.serialize(responderID)
            try coder.serialize(producedAt)
            try coder.serializeSequenceOf(responses)
            if let responseExtensions = self.responseExtensions { try coder.serialize(explicitlyTaggedWithTagNumber: 1, tagClass: .contextSpecific) { codec in try codec.serializeSequenceOf(responseExtensions) } }
        }
    }
}
